{"name":"Django-schemulator","tagline":"","body":"## django-schemulator\r\n\r\ndjango-schemulator provides the `form_to_schema(form)` function which generates a \r\nJSONSchema describing the Django form which is fed as the input argument.\r\n\r\nWhat's this all about? Read the following:\r\n\r\n[json-schema.org](http://json-schema.org/)  \r\n[A great guide to the JSON Schema syntax](http://spacetelescope.github.io/understanding-json-schema/index.html)  \r\n[Django built-in form fields](https://docs.djangoproject.com/en/1.7/ref/forms/fields/)  \r\n\r\ndjango-schemulator uses:\r\n\r\n[json-document](https://github.com/Cahersan/json-document)  \r\n[json-schema-toolkit](https://github.com/Cahersan/json-schema-toolkit)\r\n\r\nTo use django formulator install it using `pip`\r\n    \r\n    git clone https://github.com/Cahersan/django-schemulator\r\n    cd django-schemulator\r\n    pip install .\r\n\r\nand then import the function as follows\r\n\r\n    from schemulator import form_to_schema \r\n\r\ndjango-schemulator is still under developement, but so far it supports the\r\nfollowing Django fields:\r\n\r\n* BooleanField\t\r\n* CharField\t\r\n* ChoiceField\t(using `choices` argument)\r\n* DateField\t\r\n* DateTimeField\t\r\n* DecimalField\t\r\n* EmailField\t\r\n* FloatField\t\r\n* IntegerField\t\r\n* IPAddressField\t\r\n* GenericIPAddressField\t\r\n\r\nHere is a list of the field arguments supported so far:\r\n\r\n* help_text\r\n* label\r\n* initial\r\n* required\r\n\r\nAdditionaly, in string-based fields, the following field arguments can be used:\r\n\r\n* min_length\r\n* max_length\r\n\r\nIn number-based fields, the following field arguments can be used:\r\n\r\n* min_value\r\n* max_value\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}